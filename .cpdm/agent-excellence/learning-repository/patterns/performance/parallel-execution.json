{
  "pattern_name": "parallel-execution",
  "pattern_type": "performance", 
  "description": "Execute multiple tasks concurrently to reduce overall execution time",
  "problem": "Sequential task execution causing performance bottlenecks",
  "solution": "Implement parallel execution with proper resource management and error handling",
  "applicability": {
    "agents": ["research-agent", "knowledge-agent", "build-agent"],
    "conditions": ["multiple_independent_tasks", "io_bound_operations", "batch_processing"]
  },
  "implementation": {
    "before": "for item in items:\n    process(item)",
    "after": "import concurrent.futures\nwith concurrent.futures.ThreadPoolExecutor() as executor:\n    results = list(executor.map(process, items))"
  },
  "metrics": {
    "performance_gain": "60-80%",
    "success_rate": "95%", 
    "usage_count": 0,
    "last_applied": null
  },
  "risks": ["increased memory usage", "resource contention", "error handling complexity"],
  "validation": ["unit_tests", "performance_benchmarks", "resource_monitoring"]
}
EOF < /dev/null