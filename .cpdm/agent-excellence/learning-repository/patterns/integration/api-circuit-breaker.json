{
  "pattern_name": "api-circuit-breaker",
  "pattern_type": "integration",
  "description": "Implement circuit breaker pattern to prevent cascading failures in external API integrations",
  "problem": "External API failures causing system-wide performance degradation and resource exhaustion",
  "solution": "Circuit breaker with configurable failure thresholds, timeout detection, and fallback mechanisms",
  "applicability": {
    "agents": ["api-client", "service-integrator", "data-sync-agent", "external-connector"],
    "conditions": ["external_api_dependencies", "service_failures", "cascading_errors", "resource_protection"]
  },
  "implementation": {
    "before": "def call_external_api():\n    response = requests.get(api_url)\n    return response.json()",
    "after": "import time\nfrom enum import Enum\nfrom typing import Callable, Any\n\nclass CircuitState(Enum):\n    CLOSED = \"closed\"\n    OPEN = \"open\"\n    HALF_OPEN = \"half_open\"\n\nclass CircuitBreaker:\n    def __init__(self, failure_threshold: int = 5, timeout: int = 60, recovery_timeout: int = 30):\n        self.failure_threshold = failure_threshold\n        self.timeout = timeout\n        self.recovery_timeout = recovery_timeout\n        self.failure_count = 0\n        self.last_failure_time = None\n        self.state = CircuitState.CLOSED\n    \n    def call(self, func: Callable, *args, **kwargs) -> Any:\n        if self.state == CircuitState.OPEN:\n            if time.time() - self.last_failure_time > self.recovery_timeout:\n                self.state = CircuitState.HALF_OPEN\n            else:\n                raise Exception(\"Circuit breaker is OPEN\")\n        \n        try:\n            result = func(*args, **kwargs)\n            if self.state == CircuitState.HALF_OPEN:\n                self.state = CircuitState.CLOSED\n                self.failure_count = 0\n            return result\n        except Exception as e:\n            self.failure_count += 1\n            self.last_failure_time = time.time()\n            \n            if self.failure_count >= self.failure_threshold:\n                self.state = CircuitState.OPEN\n            raise e\n\ncircuit_breaker = CircuitBreaker()\n\ndef call_external_api():\n    def api_call():\n        response = requests.get(api_url, timeout=10)\n        response.raise_for_status()\n        return response.json()\n    \n    return circuit_breaker.call(api_call)"
  },
  "metrics": {
    "performance_gain": "25-40%",
    "success_rate": "89%",
    "usage_count": 0,
    "avg_improvement": 34.5
  },
  "risks": [
    "false circuit opening",
    "delayed error detection",
    "configuration complexity",
    "monitoring overhead"
  ],
  "validation": [
    "failure_threshold_testing",
    "recovery_time_validation",
    "fallback_mechanism_tests",
    "load_testing_under_failure"
  ],
  "confidence_score": 0.86,
  "created_at": "2025-08-06",
  "last_used": null,
  "author": "SubAgentMasterDesigner",
  "version": "1.0.0"
}
EOF < /dev/null