{
  "pattern_name": "retry-with-backoff",
  "pattern_type": "reliability",
  "description": "Implement exponential backoff retry mechanism for external service calls and transient failures",
  "problem": "Network timeouts, service unavailability, and transient failures causing task failures",
  "solution": "Retry failed requests with exponential backoff, jitter, and circuit breaker patterns",
  "applicability": {
    "agents": ["api-client", "service-connector", "data-fetcher", "external-integrator"],
    "conditions": ["network_errors", "service_timeouts", "api_failures", "transient_errors"]
  },
  "implementation": {
    "before": "response = api_call()\nif not response.ok:\n    raise Exception('API failed')",
    "after": "import time\nimport random\nfrom functools import wraps\n\ndef retry_with_backoff(max_retries=3, base_delay=1, max_delay=60):\n    def decorator(func):\n        @wraps(func)\n        def wrapper(*args, **kwargs):\n            for attempt in range(max_retries):\n                try:\n                    return func(*args, **kwargs)\n                except Exception as e:\n                    if attempt == max_retries - 1:\n                        raise\n                    delay = min(base_delay * (2 ** attempt) + random.uniform(0, 1), max_delay)\n                    time.sleep(delay)\n        return wrapper\n    return decorator\n\n@retry_with_backoff(max_retries=5)\ndef api_call():\n    response = requests.get(url)\n    response.raise_for_status()\n    return response"
  },
  "metrics": {
    "performance_gain": "30-50%",
    "success_rate": "88%",
    "usage_count": 0,
    "avg_improvement": 42.0
  },
  "risks": [
    "increased latency",
    "potential cascading delays", 
    "resource usage during retries",
    "thundering herd problems"
  ],
  "validation": [
    "network_simulation_tests",
    "timeout_testing",
    "failure_injection",
    "load_testing_with_failures"
  ],
  "confidence_score": 0.88,
  "created_at": "2025-08-06",
  "last_used": null,
  "author": "SubAgentMasterDesigner",
  "version": "1.0.0"
}
EOF < /dev/null